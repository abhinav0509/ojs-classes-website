# Enable rewrite engine
RewriteEngine On

# Force HTTPS
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

# Prevent directory listing
Options -Indexes

# Protect .htaccess file
<Files .htaccess>
    Order allow,deny
    Deny from all
</Files>

# Set default character set
AddDefaultCharset UTF-8

# Enable CORS
Header set Access-Control-Allow-Origin "*"

# Cache control for static files
<FilesMatch "\.(css|js|jpg|jpeg|png|gif|ico)$">
    Header set Cache-Control "max-age=31536000, public"
</FilesMatch>

# Compress text files
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/xml
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/x-javascript
</IfModule>

# Error documents
ErrorDocument 404 /404.html
ErrorDocument 500 /500.html

# Prevent access to sensitive files
<FilesMatch "^(\.env|\.git|\.gitignore|composer\.json|composer\.lock|package\.json|package-lock\.json)$">
    Order allow,deny
    Deny from all
</FilesMatch>

# Handle routing for HTML files
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteBase /
    
    # If the request is for an existing file or directory, serve it directly
    RewriteCond %{REQUEST_FILENAME} -f [OR]
    RewriteCond %{REQUEST_FILENAME} -d
    RewriteRule ^ - [L]
    
    # If the request is for a .html file that exists, serve it directly
    RewriteCond %{REQUEST_FILENAME}.html -f
    RewriteRule ^(.+?)/?$ $1.html [L]
    
    # If the request is not for an existing file or directory, serve index.html
    RewriteRule ^ index.html [L]
</IfModule>